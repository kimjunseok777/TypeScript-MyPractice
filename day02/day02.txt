


) 타입스크립트 사용 이유

        1. 컴파일 단계에서의 에러 발견
        2. 자동완성을 통한 개발자 경험 개선
        3. 문서화


=====================================================================================

day 02 에서는 함수타입 , 제네릭타입, 유틸타입에 대해서 알아볼 것이다

=====================================================================================


) 함수 타입
        -->  함수의 매개변수에 타입을 줄 수 있는 것
        -->  내뱉는 값에도 타입을 줄 수 있다

) 제네릭 타입
        -->  함수의 인자로 받은 타입을, 그대로 받아서 활용할 수 있는 것
        -->  밑에 제네릭타입 필기 확인해보자

) 유틸 타입
        -->  타입을 쉽게 활용할 수 있는 고급 타입


=====================================================================================


제네릭타입 )

        타입이 정적이다라는 것은 굉장히 좋지 않을 수도 있다
        number 가 들어와야하는데, null 인지 검사하는 함수를 만들었다고 해보자  -->  이 친구는 number 밖에 못들어온다
        -->  또 string 이 null 인지 검사하는 함수를 한번 더 만들어야한다  -->  새로 만들어야해서 안좋다

        하지만 제네릭 타입을 사용하면 이러지 않아도 된다
        -->  인자가 들어온 타입을 그대로 받을 수 있다 (string 이면 string , number 면 number 이렇게 그대로 인자 타입을 받을 수 있다)


        제네릭 사용 안함 ex)
                function func( args : number ) {  )-->  유니온을 쓰지 않는다는 전재로 봐보자
                    ... args 가 숫자가 아닌지 검사
                }
                func( "5" )  -->  이렇게 문자열 못들어 간다 ( X )
                func( "5" )  -->  문자열만 가능하다 ( O )
                ) args 가 숫자가 아니면 들어가지 못한다  -->  그렇다고 유니온을 여러개 작성해주기도 뭐하다 (유니온을 20개 ... 30개 작성하는 건 말이 안된다)


        제네릭 사용함 ex)
                function func<T>( args : T ) {  )-->  이러면 args 타입이 T 라는 변수에 들어간다
                    ... args 가 숫자가 아닌지 검사
                    ) T 를 활용 가능하다  -->  number 가 들어오면 number 가 되고, string 이 들어오면 string 이 된다
                }
                ) 타입의 동적 지정을 통한 함수의 재활용이 가능하다
                ) 하나의 함수가 여러 타입의 instance 로 바뀔 수 있다 (여러 타입의 환경으로 동적으로 변경이 된다)

        
        제네릭은 함수의 인자로 받은 타입을, 그대로 받아서 활용할 수 있는 것이 제네릭이다


=====================================================================================


) 사용하면 안되는 타입에 대해서 정의


=====================================================================================